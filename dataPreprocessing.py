# -*- coding: utf-8 -*-
"""classification-MTGNN-attn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oglsWX-C5i7H-_l3h8-D8nW_VVbdf67u

# Direction of price movement for crude oil and preciouse metal

## Set Up
"""

import os
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
import torch
from helperFunctions import create_sequences

torch.manual_seed(123)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')


"""## Part 1: Graph Data Preparation"""

data = pd.read_excel("./data/Node data_clean.xlsx", index_col="Date")


"""### Define Parameters ans Split Data"""

train_prop = 0.65
val_prop = 0.15
test_prop = 0.2
in_dim = 1
out_dim = 1
n_out_seq = 1
num_epochs = 40
clip = 5

# model parameters
kernel_set = [2, 3, 6, 7]
gcn_depth = 2

## valid_acc = 0.80346
n_in_seq = 20 # number of historical time steps to consider
batch_size = 32
learning_rate = 0.005
heads = 4
layers = 2 # number of MTGNNLayer
node_emb_dim = 32
out = 32
skip = 16
conv_res = 64
subgraph_size = 15
reg_penalty = 0.0001
batch_size = 16
dropout= 0.5


num_samples, num_nodes = data.shape

# model save path
model_save_path = os.path.join('.','Outputs', 'best_model_mtgnn_attn.pt')
real_save_path = os.path.join('.', 'Outputs', 'y_test_mtgnn_attn.csv')
pred_save_path = os.path.join('.', 'Outputs', 'preds_test_mtgnn_attn.csv')
adj_save_path = os.path.join('.', 'Outputs', 'adj_mtgnn_attn.pt')



# get data splits
len_train = round(num_samples * train_prop)
len_val = round(num_samples * val_prop)
train = data[ : len_train]
val = data[len_train : len_train + len_val]
test = data[len_train + len_val : ]

# get the splits of moving averages
EMA = data.ewm(alpha=0.2,min_periods=1).mean()
train_EMA = EMA[ : len_train]
val_EMA = EMA[len_train : len_train + len_val]
test_EMA = EMA[len_train + len_val : ]

# normalize values
scaler = StandardScaler()
train = np.nan_to_num(scaler.fit_transform(train))
val = np.nan_to_num(scaler.transform(val))
test = np.nan_to_num(scaler.transform(test))

train_EMA = np.nan_to_num(scaler.transform(train_EMA))
val_EMA = np.nan_to_num(scaler.transform(val_EMA))
test_EMA = np.nan_to_num(scaler.transform(test_EMA))



"""## Prepare batches of input sequences"""

# create training examples using helper function
X_train, y_train = create_sequences(train, n_in_seq, n_out_seq, train_EMA, device)
X_val, y_val = create_sequences(val, n_in_seq, n_out_seq, val_EMA, device)
X_test, y_test = create_sequences(test, n_in_seq, n_out_seq, test_EMA, device)

# create torch data iterables for training
train_data = torch.utils.data.TensorDataset(X_train, y_train)
train_iter = torch.utils.data.DataLoader(train_data, batch_size, shuffle=True)
val_data = torch.utils.data.TensorDataset(X_val, y_val)
val_iter = torch.utils.data.DataLoader(val_data, batch_size)
test_data = torch.utils.data.TensorDataset(X_test, y_test)
test_iter = torch.utils.data.DataLoader(test_data, batch_size)
